# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.6
#
# <auto-generated>
#
# Generated from file `adapter.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module adapter
_M_adapter = Ice.openModule('adapter')
__name__ = 'adapter'

if 'ItemType' not in _M_adapter.__dict__:
    _M_adapter.ItemType = Ice.createTempClass()
    class ItemType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ItemType.SCENARIO = ItemType("SCENARIO", 0)
    ItemType.VEHICLE = ItemType("VEHICLE", 1)
    ItemType.CYCLIST = ItemType("CYCLIST", 2)
    ItemType.PEDESTRIAN = ItemType("PEDESTRIAN", 3)
    ItemType.LANE = ItemType("LANE", 4)
    ItemType.ROAD = ItemType("ROAD", 5)
    ItemType.DELIMITER = ItemType("DELIMITER", 6)
    ItemType.JUNCTION = ItemType("JUNCTION", 7)
    ItemType.LANEBOUNDARY = ItemType("LANEBOUNDARY", 8)
    ItemType.ROADATTRIBUTES = ItemType("ROADATTRIBUTES", 9)
    ItemType.WEATHER = ItemType("WEATHER", 10)
    ItemType._enumerators = { 0:ItemType.SCENARIO, 1:ItemType.VEHICLE, 2:ItemType.CYCLIST, 3:ItemType.PEDESTRIAN, 4:ItemType.LANE, 5:ItemType.ROAD, 6:ItemType.DELIMITER, 7:ItemType.JUNCTION, 8:ItemType.LANEBOUNDARY, 9:ItemType.ROADATTRIBUTES, 10:ItemType.WEATHER }

    _M_adapter._t_ItemType = IcePy.defineEnum('::adapter::ItemType', ItemType, (), ItemType._enumerators)

    _M_adapter.ItemType = ItemType
    del ItemType

_M_adapter._t_BaseItem = IcePy.defineValue('::adapter::BaseItem', Ice.Value, -1, (), False, True, None, ())

if 'BaseItemPrx' not in _M_adapter.__dict__:
    _M_adapter.BaseItemPrx = Ice.createTempClass()
    class BaseItemPrx(Ice.ObjectPrx):

        def getId(self, context=None):
            return _M_adapter.BaseItem._op_getId.invoke(self, ((), context))

        def getIdAsync(self, context=None):
            return _M_adapter.BaseItem._op_getId.invokeAsync(self, ((), context))

        def begin_getId(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.BaseItem._op_getId.begin(self, ((), _response, _ex, _sent, context))

        def end_getId(self, _r):
            return _M_adapter.BaseItem._op_getId.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.BaseItemPrx.ice_checkedCast(proxy, '::adapter::BaseItem', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.BaseItemPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::BaseItem'
    _M_adapter._t_BaseItemPrx = IcePy.defineProxy('::adapter::BaseItem', BaseItemPrx)

    _M_adapter.BaseItemPrx = BaseItemPrx
    del BaseItemPrx

    _M_adapter.BaseItem = Ice.createTempClass()
    class BaseItem(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem')

        def ice_id(self, current=None):
            return '::adapter::BaseItem'

        @staticmethod
        def ice_staticId():
            return '::adapter::BaseItem'

        def getId(self, current=None):
            raise NotImplementedError("servant method 'getId' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_BaseItemDisp)

        __repr__ = __str__

    _M_adapter._t_BaseItemDisp = IcePy.defineClass('::adapter::BaseItem', BaseItem, (), None, ())
    BaseItem._ice_type = _M_adapter._t_BaseItemDisp

    BaseItem._op_getId = IcePy.Operation('getId', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_adapter.BaseItem = BaseItem
    del BaseItem

_M_adapter._t_Scenario = IcePy.defineValue('::adapter::Scenario', Ice.Value, -1, (), False, True, None, ())

if 'ScenarioPrx' not in _M_adapter.__dict__:
    _M_adapter.ScenarioPrx = Ice.createTempClass()
    class ScenarioPrx(_M_adapter.BaseItemPrx):

        def addVehicle(self, vehicleId, context=None):
            return _M_adapter.Scenario._op_addVehicle.invoke(self, ((vehicleId, ), context))

        def addVehicleAsync(self, vehicleId, context=None):
            return _M_adapter.Scenario._op_addVehicle.invokeAsync(self, ((vehicleId, ), context))

        def begin_addVehicle(self, vehicleId, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Scenario._op_addVehicle.begin(self, ((vehicleId, ), _response, _ex, _sent, context))

        def end_addVehicle(self, _r):
            return _M_adapter.Scenario._op_addVehicle.end(self, _r)

        def addCyclist(self, cyclistId, context=None):
            return _M_adapter.Scenario._op_addCyclist.invoke(self, ((cyclistId, ), context))

        def addCyclistAsync(self, cyclistId, context=None):
            return _M_adapter.Scenario._op_addCyclist.invokeAsync(self, ((cyclistId, ), context))

        def begin_addCyclist(self, cyclistId, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Scenario._op_addCyclist.begin(self, ((cyclistId, ), _response, _ex, _sent, context))

        def end_addCyclist(self, _r):
            return _M_adapter.Scenario._op_addCyclist.end(self, _r)

        def addPedestrian(self, pedestrianId, context=None):
            return _M_adapter.Scenario._op_addPedestrian.invoke(self, ((pedestrianId, ), context))

        def addPedestrianAsync(self, pedestrianId, context=None):
            return _M_adapter.Scenario._op_addPedestrian.invokeAsync(self, ((pedestrianId, ), context))

        def begin_addPedestrian(self, pedestrianId, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Scenario._op_addPedestrian.begin(self, ((pedestrianId, ), _response, _ex, _sent, context))

        def end_addPedestrian(self, _r):
            return _M_adapter.Scenario._op_addPedestrian.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.ScenarioPrx.ice_checkedCast(proxy, '::adapter::Scenario', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.ScenarioPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::Scenario'
    _M_adapter._t_ScenarioPrx = IcePy.defineProxy('::adapter::Scenario', ScenarioPrx)

    _M_adapter.ScenarioPrx = ScenarioPrx
    del ScenarioPrx

    _M_adapter.Scenario = Ice.createTempClass()
    class Scenario(_M_adapter.BaseItem):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::Scenario')

        def ice_id(self, current=None):
            return '::adapter::Scenario'

        @staticmethod
        def ice_staticId():
            return '::adapter::Scenario'

        def addVehicle(self, vehicleId, current=None):
            raise NotImplementedError("servant method 'addVehicle' not implemented")

        def addCyclist(self, cyclistId, current=None):
            raise NotImplementedError("servant method 'addCyclist' not implemented")

        def addPedestrian(self, pedestrianId, current=None):
            raise NotImplementedError("servant method 'addPedestrian' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_ScenarioDisp)

        __repr__ = __str__

    _M_adapter._t_ScenarioDisp = IcePy.defineClass('::adapter::Scenario', Scenario, (), None, (_M_adapter._t_BaseItemDisp,))
    Scenario._ice_type = _M_adapter._t_ScenarioDisp

    Scenario._op_addVehicle = IcePy.Operation('addVehicle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Scenario._op_addCyclist = IcePy.Operation('addCyclist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Scenario._op_addPedestrian = IcePy.Operation('addPedestrian', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_adapter.Scenario = Scenario
    del Scenario

_M_adapter._t_Lane = IcePy.defineValue('::adapter::Lane', Ice.Value, -1, (), False, True, None, ())

if 'LanePrx' not in _M_adapter.__dict__:
    _M_adapter.LanePrx = Ice.createTempClass()
    class LanePrx(_M_adapter.BaseItemPrx):

        def setWidth(self, width, context=None):
            return _M_adapter.Lane._op_setWidth.invoke(self, ((width, ), context))

        def setWidthAsync(self, width, context=None):
            return _M_adapter.Lane._op_setWidth.invokeAsync(self, ((width, ), context))

        def begin_setWidth(self, width, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Lane._op_setWidth.begin(self, ((width, ), _response, _ex, _sent, context))

        def end_setWidth(self, _r):
            return _M_adapter.Lane._op_setWidth.end(self, _r)

        def setLeftSideBoundary(self, boundaryId, context=None):
            return _M_adapter.Lane._op_setLeftSideBoundary.invoke(self, ((boundaryId, ), context))

        def setLeftSideBoundaryAsync(self, boundaryId, context=None):
            return _M_adapter.Lane._op_setLeftSideBoundary.invokeAsync(self, ((boundaryId, ), context))

        def begin_setLeftSideBoundary(self, boundaryId, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Lane._op_setLeftSideBoundary.begin(self, ((boundaryId, ), _response, _ex, _sent, context))

        def end_setLeftSideBoundary(self, _r):
            return _M_adapter.Lane._op_setLeftSideBoundary.end(self, _r)

        def setRightSideBoundary(self, boundaryId, context=None):
            return _M_adapter.Lane._op_setRightSideBoundary.invoke(self, ((boundaryId, ), context))

        def setRightSideBoundaryAsync(self, boundaryId, context=None):
            return _M_adapter.Lane._op_setRightSideBoundary.invokeAsync(self, ((boundaryId, ), context))

        def begin_setRightSideBoundary(self, boundaryId, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Lane._op_setRightSideBoundary.begin(self, ((boundaryId, ), _response, _ex, _sent, context))

        def end_setRightSideBoundary(self, _r):
            return _M_adapter.Lane._op_setRightSideBoundary.end(self, _r)

        def setRoad(self, roadId, context=None):
            return _M_adapter.Lane._op_setRoad.invoke(self, ((roadId, ), context))

        def setRoadAsync(self, roadId, context=None):
            return _M_adapter.Lane._op_setRoad.invokeAsync(self, ((roadId, ), context))

        def begin_setRoad(self, roadId, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Lane._op_setRoad.begin(self, ((roadId, ), _response, _ex, _sent, context))

        def end_setRoad(self, _r):
            return _M_adapter.Lane._op_setRoad.end(self, _r)

        def setLaneNumber(self, laneNumber, context=None):
            return _M_adapter.Lane._op_setLaneNumber.invoke(self, ((laneNumber, ), context))

        def setLaneNumberAsync(self, laneNumber, context=None):
            return _M_adapter.Lane._op_setLaneNumber.invokeAsync(self, ((laneNumber, ), context))

        def begin_setLaneNumber(self, laneNumber, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Lane._op_setLaneNumber.begin(self, ((laneNumber, ), _response, _ex, _sent, context))

        def end_setLaneNumber(self, _r):
            return _M_adapter.Lane._op_setLaneNumber.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.LanePrx.ice_checkedCast(proxy, '::adapter::Lane', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.LanePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::Lane'
    _M_adapter._t_LanePrx = IcePy.defineProxy('::adapter::Lane', LanePrx)

    _M_adapter.LanePrx = LanePrx
    del LanePrx

    _M_adapter.Lane = Ice.createTempClass()
    class Lane(_M_adapter.BaseItem):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::Lane')

        def ice_id(self, current=None):
            return '::adapter::Lane'

        @staticmethod
        def ice_staticId():
            return '::adapter::Lane'

        def setWidth(self, width, current=None):
            raise NotImplementedError("servant method 'setWidth' not implemented")

        def setLeftSideBoundary(self, boundaryId, current=None):
            raise NotImplementedError("servant method 'setLeftSideBoundary' not implemented")

        def setRightSideBoundary(self, boundaryId, current=None):
            raise NotImplementedError("servant method 'setRightSideBoundary' not implemented")

        def setRoad(self, roadId, current=None):
            raise NotImplementedError("servant method 'setRoad' not implemented")

        def setLaneNumber(self, laneNumber, current=None):
            raise NotImplementedError("servant method 'setLaneNumber' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_LaneDisp)

        __repr__ = __str__

    _M_adapter._t_LaneDisp = IcePy.defineClass('::adapter::Lane', Lane, (), None, (_M_adapter._t_BaseItemDisp,))
    Lane._ice_type = _M_adapter._t_LaneDisp

    Lane._op_setWidth = IcePy.Operation('setWidth', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Lane._op_setLeftSideBoundary = IcePy.Operation('setLeftSideBoundary', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Lane._op_setRightSideBoundary = IcePy.Operation('setRightSideBoundary', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Lane._op_setRoad = IcePy.Operation('setRoad', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Lane._op_setLaneNumber = IcePy.Operation('setLaneNumber', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_adapter.Lane = Lane
    del Lane

_M_adapter._t_LaneBoundary = IcePy.defineValue('::adapter::LaneBoundary', Ice.Value, -1, (), False, True, None, ())

if 'LaneBoundaryPrx' not in _M_adapter.__dict__:
    _M_adapter.LaneBoundaryPrx = Ice.createTempClass()
    class LaneBoundaryPrx(_M_adapter.BaseItemPrx):

        def setType(self, type, context=None):
            return _M_adapter.LaneBoundary._op_setType.invoke(self, ((type, ), context))

        def setTypeAsync(self, type, context=None):
            return _M_adapter.LaneBoundary._op_setType.invokeAsync(self, ((type, ), context))

        def begin_setType(self, type, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.LaneBoundary._op_setType.begin(self, ((type, ), _response, _ex, _sent, context))

        def end_setType(self, _r):
            return _M_adapter.LaneBoundary._op_setType.end(self, _r)

        def setColor(self, color, context=None):
            return _M_adapter.LaneBoundary._op_setColor.invoke(self, ((color, ), context))

        def setColorAsync(self, color, context=None):
            return _M_adapter.LaneBoundary._op_setColor.invokeAsync(self, ((color, ), context))

        def begin_setColor(self, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.LaneBoundary._op_setColor.begin(self, ((color, ), _response, _ex, _sent, context))

        def end_setColor(self, _r):
            return _M_adapter.LaneBoundary._op_setColor.end(self, _r)

        def setMaterial(self, material, context=None):
            return _M_adapter.LaneBoundary._op_setMaterial.invoke(self, ((material, ), context))

        def setMaterialAsync(self, material, context=None):
            return _M_adapter.LaneBoundary._op_setMaterial.invokeAsync(self, ((material, ), context))

        def begin_setMaterial(self, material, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.LaneBoundary._op_setMaterial.begin(self, ((material, ), _response, _ex, _sent, context))

        def end_setMaterial(self, _r):
            return _M_adapter.LaneBoundary._op_setMaterial.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.LaneBoundaryPrx.ice_checkedCast(proxy, '::adapter::LaneBoundary', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.LaneBoundaryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::LaneBoundary'
    _M_adapter._t_LaneBoundaryPrx = IcePy.defineProxy('::adapter::LaneBoundary', LaneBoundaryPrx)

    _M_adapter.LaneBoundaryPrx = LaneBoundaryPrx
    del LaneBoundaryPrx

    _M_adapter.LaneBoundary = Ice.createTempClass()
    class LaneBoundary(_M_adapter.BaseItem):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::LaneBoundary')

        def ice_id(self, current=None):
            return '::adapter::LaneBoundary'

        @staticmethod
        def ice_staticId():
            return '::adapter::LaneBoundary'

        def setType(self, type, current=None):
            raise NotImplementedError("servant method 'setType' not implemented")

        def setColor(self, color, current=None):
            raise NotImplementedError("servant method 'setColor' not implemented")

        def setMaterial(self, material, current=None):
            raise NotImplementedError("servant method 'setMaterial' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_LaneBoundaryDisp)

        __repr__ = __str__

    _M_adapter._t_LaneBoundaryDisp = IcePy.defineClass('::adapter::LaneBoundary', LaneBoundary, (), None, (_M_adapter._t_BaseItemDisp,))
    LaneBoundary._ice_type = _M_adapter._t_LaneBoundaryDisp

    LaneBoundary._op_setType = IcePy.Operation('setType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    LaneBoundary._op_setColor = IcePy.Operation('setColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    LaneBoundary._op_setMaterial = IcePy.Operation('setMaterial', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_adapter.LaneBoundary = LaneBoundary
    del LaneBoundary

_M_adapter._t_Entity = IcePy.defineValue('::adapter::Entity', Ice.Value, -1, (), False, True, None, ())

if 'EntityPrx' not in _M_adapter.__dict__:
    _M_adapter.EntityPrx = Ice.createTempClass()
    class EntityPrx(_M_adapter.BaseItemPrx):

        def setLane(self, laneId, context=None):
            return _M_adapter.Entity._op_setLane.invoke(self, ((laneId, ), context))

        def setLaneAsync(self, laneId, context=None):
            return _M_adapter.Entity._op_setLane.invokeAsync(self, ((laneId, ), context))

        def begin_setLane(self, laneId, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Entity._op_setLane.begin(self, ((laneId, ), _response, _ex, _sent, context))

        def end_setLane(self, _r):
            return _M_adapter.Entity._op_setLane.end(self, _r)

        def setDistance(self, distance, context=None):
            return _M_adapter.Entity._op_setDistance.invoke(self, ((distance, ), context))

        def setDistanceAsync(self, distance, context=None):
            return _M_adapter.Entity._op_setDistance.invokeAsync(self, ((distance, ), context))

        def begin_setDistance(self, distance, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Entity._op_setDistance.begin(self, ((distance, ), _response, _ex, _sent, context))

        def end_setDistance(self, _r):
            return _M_adapter.Entity._op_setDistance.end(self, _r)

        def setAccelerationX(self, accelerationX, context=None):
            return _M_adapter.Entity._op_setAccelerationX.invoke(self, ((accelerationX, ), context))

        def setAccelerationXAsync(self, accelerationX, context=None):
            return _M_adapter.Entity._op_setAccelerationX.invokeAsync(self, ((accelerationX, ), context))

        def begin_setAccelerationX(self, accelerationX, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Entity._op_setAccelerationX.begin(self, ((accelerationX, ), _response, _ex, _sent, context))

        def end_setAccelerationX(self, _r):
            return _M_adapter.Entity._op_setAccelerationX.end(self, _r)

        def setAccelerationY(self, accelerationY, context=None):
            return _M_adapter.Entity._op_setAccelerationY.invoke(self, ((accelerationY, ), context))

        def setAccelerationYAsync(self, accelerationY, context=None):
            return _M_adapter.Entity._op_setAccelerationY.invokeAsync(self, ((accelerationY, ), context))

        def begin_setAccelerationY(self, accelerationY, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Entity._op_setAccelerationY.begin(self, ((accelerationY, ), _response, _ex, _sent, context))

        def end_setAccelerationY(self, _r):
            return _M_adapter.Entity._op_setAccelerationY.end(self, _r)

        def setLength(self, length, context=None):
            return _M_adapter.Entity._op_setLength.invoke(self, ((length, ), context))

        def setLengthAsync(self, length, context=None):
            return _M_adapter.Entity._op_setLength.invokeAsync(self, ((length, ), context))

        def begin_setLength(self, length, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Entity._op_setLength.begin(self, ((length, ), _response, _ex, _sent, context))

        def end_setLength(self, _r):
            return _M_adapter.Entity._op_setLength.end(self, _r)

        def setWidth(self, width, context=None):
            return _M_adapter.Entity._op_setWidth.invoke(self, ((width, ), context))

        def setWidthAsync(self, width, context=None):
            return _M_adapter.Entity._op_setWidth.invokeAsync(self, ((width, ), context))

        def begin_setWidth(self, width, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Entity._op_setWidth.begin(self, ((width, ), _response, _ex, _sent, context))

        def end_setWidth(self, _r):
            return _M_adapter.Entity._op_setWidth.end(self, _r)

        def setSpeedX(self, speedX, context=None):
            return _M_adapter.Entity._op_setSpeedX.invoke(self, ((speedX, ), context))

        def setSpeedXAsync(self, speedX, context=None):
            return _M_adapter.Entity._op_setSpeedX.invokeAsync(self, ((speedX, ), context))

        def begin_setSpeedX(self, speedX, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Entity._op_setSpeedX.begin(self, ((speedX, ), _response, _ex, _sent, context))

        def end_setSpeedX(self, _r):
            return _M_adapter.Entity._op_setSpeedX.end(self, _r)

        def setSpeedY(self, speedY, context=None):
            return _M_adapter.Entity._op_setSpeedY.invoke(self, ((speedY, ), context))

        def setSpeedYAsync(self, speedY, context=None):
            return _M_adapter.Entity._op_setSpeedY.invokeAsync(self, ((speedY, ), context))

        def begin_setSpeedY(self, speedY, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Entity._op_setSpeedY.begin(self, ((speedY, ), _response, _ex, _sent, context))

        def end_setSpeedY(self, _r):
            return _M_adapter.Entity._op_setSpeedY.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.EntityPrx.ice_checkedCast(proxy, '::adapter::Entity', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.EntityPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::Entity'
    _M_adapter._t_EntityPrx = IcePy.defineProxy('::adapter::Entity', EntityPrx)

    _M_adapter.EntityPrx = EntityPrx
    del EntityPrx

    _M_adapter.Entity = Ice.createTempClass()
    class Entity(_M_adapter.BaseItem):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::Entity')

        def ice_id(self, current=None):
            return '::adapter::Entity'

        @staticmethod
        def ice_staticId():
            return '::adapter::Entity'

        def setLane(self, laneId, current=None):
            raise NotImplementedError("servant method 'setLane' not implemented")

        def setDistance(self, distance, current=None):
            raise NotImplementedError("servant method 'setDistance' not implemented")

        def setAccelerationX(self, accelerationX, current=None):
            raise NotImplementedError("servant method 'setAccelerationX' not implemented")

        def setAccelerationY(self, accelerationY, current=None):
            raise NotImplementedError("servant method 'setAccelerationY' not implemented")

        def setLength(self, length, current=None):
            raise NotImplementedError("servant method 'setLength' not implemented")

        def setWidth(self, width, current=None):
            raise NotImplementedError("servant method 'setWidth' not implemented")

        def setSpeedX(self, speedX, current=None):
            raise NotImplementedError("servant method 'setSpeedX' not implemented")

        def setSpeedY(self, speedY, current=None):
            raise NotImplementedError("servant method 'setSpeedY' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_EntityDisp)

        __repr__ = __str__

    _M_adapter._t_EntityDisp = IcePy.defineClass('::adapter::Entity', Entity, (), None, (_M_adapter._t_BaseItemDisp,))
    Entity._ice_type = _M_adapter._t_EntityDisp

    Entity._op_setLane = IcePy.Operation('setLane', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Entity._op_setDistance = IcePy.Operation('setDistance', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    Entity._op_setAccelerationX = IcePy.Operation('setAccelerationX', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    Entity._op_setAccelerationY = IcePy.Operation('setAccelerationY', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    Entity._op_setLength = IcePy.Operation('setLength', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    Entity._op_setWidth = IcePy.Operation('setWidth', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    Entity._op_setSpeedX = IcePy.Operation('setSpeedX', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    Entity._op_setSpeedY = IcePy.Operation('setSpeedY', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())

    _M_adapter.Entity = Entity
    del Entity

_M_adapter._t_Pedestrian = IcePy.defineValue('::adapter::Pedestrian', Ice.Value, -1, (), False, True, None, ())

if 'PedestrianPrx' not in _M_adapter.__dict__:
    _M_adapter.PedestrianPrx = Ice.createTempClass()
    class PedestrianPrx(_M_adapter.EntityPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.PedestrianPrx.ice_checkedCast(proxy, '::adapter::Pedestrian', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.PedestrianPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::Pedestrian'
    _M_adapter._t_PedestrianPrx = IcePy.defineProxy('::adapter::Pedestrian', PedestrianPrx)

    _M_adapter.PedestrianPrx = PedestrianPrx
    del PedestrianPrx

    _M_adapter.Pedestrian = Ice.createTempClass()
    class Pedestrian(_M_adapter.Entity):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::Entity', '::adapter::Pedestrian')

        def ice_id(self, current=None):
            return '::adapter::Pedestrian'

        @staticmethod
        def ice_staticId():
            return '::adapter::Pedestrian'

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_PedestrianDisp)

        __repr__ = __str__

    _M_adapter._t_PedestrianDisp = IcePy.defineClass('::adapter::Pedestrian', Pedestrian, (), None, (_M_adapter._t_EntityDisp,))
    Pedestrian._ice_type = _M_adapter._t_PedestrianDisp

    _M_adapter.Pedestrian = Pedestrian
    del Pedestrian

_M_adapter._t_Vehicle = IcePy.defineValue('::adapter::Vehicle', Ice.Value, -1, (), False, True, None, ())

if 'VehiclePrx' not in _M_adapter.__dict__:
    _M_adapter.VehiclePrx = Ice.createTempClass()
    class VehiclePrx(_M_adapter.EntityPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.VehiclePrx.ice_checkedCast(proxy, '::adapter::Vehicle', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.VehiclePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::Vehicle'
    _M_adapter._t_VehiclePrx = IcePy.defineProxy('::adapter::Vehicle', VehiclePrx)

    _M_adapter.VehiclePrx = VehiclePrx
    del VehiclePrx

    _M_adapter.Vehicle = Ice.createTempClass()
    class Vehicle(_M_adapter.Entity):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::Entity', '::adapter::Vehicle')

        def ice_id(self, current=None):
            return '::adapter::Vehicle'

        @staticmethod
        def ice_staticId():
            return '::adapter::Vehicle'

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_VehicleDisp)

        __repr__ = __str__

    _M_adapter._t_VehicleDisp = IcePy.defineClass('::adapter::Vehicle', Vehicle, (), None, (_M_adapter._t_EntityDisp,))
    Vehicle._ice_type = _M_adapter._t_VehicleDisp

    _M_adapter.Vehicle = Vehicle
    del Vehicle

_M_adapter._t_Cyclist = IcePy.defineValue('::adapter::Cyclist', Ice.Value, -1, (), False, True, None, ())

if 'CyclistPrx' not in _M_adapter.__dict__:
    _M_adapter.CyclistPrx = Ice.createTempClass()
    class CyclistPrx(_M_adapter.EntityPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.CyclistPrx.ice_checkedCast(proxy, '::adapter::Cyclist', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.CyclistPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::Cyclist'
    _M_adapter._t_CyclistPrx = IcePy.defineProxy('::adapter::Cyclist', CyclistPrx)

    _M_adapter.CyclistPrx = CyclistPrx
    del CyclistPrx

    _M_adapter.Cyclist = Ice.createTempClass()
    class Cyclist(_M_adapter.Entity):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::Cyclist', '::adapter::Entity')

        def ice_id(self, current=None):
            return '::adapter::Cyclist'

        @staticmethod
        def ice_staticId():
            return '::adapter::Cyclist'

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_CyclistDisp)

        __repr__ = __str__

    _M_adapter._t_CyclistDisp = IcePy.defineClass('::adapter::Cyclist', Cyclist, (), None, (_M_adapter._t_EntityDisp,))
    Cyclist._ice_type = _M_adapter._t_CyclistDisp

    _M_adapter.Cyclist = Cyclist
    del Cyclist

_M_adapter._t_Road = IcePy.defineValue('::adapter::Road', Ice.Value, -1, (), False, True, None, ())

if 'RoadPrx' not in _M_adapter.__dict__:
    _M_adapter.RoadPrx = Ice.createTempClass()
    class RoadPrx(_M_adapter.BaseItemPrx):

        def setStartAngle(self, angle, context=None):
            return _M_adapter.Road._op_setStartAngle.invoke(self, ((angle, ), context))

        def setStartAngleAsync(self, angle, context=None):
            return _M_adapter.Road._op_setStartAngle.invokeAsync(self, ((angle, ), context))

        def begin_setStartAngle(self, angle, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Road._op_setStartAngle.begin(self, ((angle, ), _response, _ex, _sent, context))

        def end_setStartAngle(self, _r):
            return _M_adapter.Road._op_setStartAngle.end(self, _r)

        def setEndAngle(self, angle, context=None):
            return _M_adapter.Road._op_setEndAngle.invoke(self, ((angle, ), context))

        def setEndAngleAsync(self, angle, context=None):
            return _M_adapter.Road._op_setEndAngle.invokeAsync(self, ((angle, ), context))

        def begin_setEndAngle(self, angle, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Road._op_setEndAngle.begin(self, ((angle, ), _response, _ex, _sent, context))

        def end_setEndAngle(self, _r):
            return _M_adapter.Road._op_setEndAngle.end(self, _r)

        def setStarts(self, roadPointId, context=None):
            return _M_adapter.Road._op_setStarts.invoke(self, ((roadPointId, ), context))

        def setStartsAsync(self, roadPointId, context=None):
            return _M_adapter.Road._op_setStarts.invokeAsync(self, ((roadPointId, ), context))

        def begin_setStarts(self, roadPointId, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Road._op_setStarts.begin(self, ((roadPointId, ), _response, _ex, _sent, context))

        def end_setStarts(self, _r):
            return _M_adapter.Road._op_setStarts.end(self, _r)

        def setEnds(self, roadPointId, context=None):
            return _M_adapter.Road._op_setEnds.invoke(self, ((roadPointId, ), context))

        def setEndsAsync(self, roadPointId, context=None):
            return _M_adapter.Road._op_setEnds.invokeAsync(self, ((roadPointId, ), context))

        def begin_setEnds(self, roadPointId, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Road._op_setEnds.begin(self, ((roadPointId, ), _response, _ex, _sent, context))

        def end_setEnds(self, _r):
            return _M_adapter.Road._op_setEnds.end(self, _r)

        def setRoadAttributes(self, roadAttributesId, context=None):
            return _M_adapter.Road._op_setRoadAttributes.invoke(self, ((roadAttributesId, ), context))

        def setRoadAttributesAsync(self, roadAttributesId, context=None):
            return _M_adapter.Road._op_setRoadAttributes.invokeAsync(self, ((roadAttributesId, ), context))

        def begin_setRoadAttributes(self, roadAttributesId, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Road._op_setRoadAttributes.begin(self, ((roadAttributesId, ), _response, _ex, _sent, context))

        def end_setRoadAttributes(self, _r):
            return _M_adapter.Road._op_setRoadAttributes.end(self, _r)

        def setAverageSpeed(self, averageSpeed, context=None):
            return _M_adapter.Road._op_setAverageSpeed.invoke(self, ((averageSpeed, ), context))

        def setAverageSpeedAsync(self, averageSpeed, context=None):
            return _M_adapter.Road._op_setAverageSpeed.invokeAsync(self, ((averageSpeed, ), context))

        def begin_setAverageSpeed(self, averageSpeed, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Road._op_setAverageSpeed.begin(self, ((averageSpeed, ), _response, _ex, _sent, context))

        def end_setAverageSpeed(self, _r):
            return _M_adapter.Road._op_setAverageSpeed.end(self, _r)

        def setSpeedLimit(self, speedLimit, context=None):
            return _M_adapter.Road._op_setSpeedLimit.invoke(self, ((speedLimit, ), context))

        def setSpeedLimitAsync(self, speedLimit, context=None):
            return _M_adapter.Road._op_setSpeedLimit.invokeAsync(self, ((speedLimit, ), context))

        def begin_setSpeedLimit(self, speedLimit, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Road._op_setSpeedLimit.begin(self, ((speedLimit, ), _response, _ex, _sent, context))

        def end_setSpeedLimit(self, _r):
            return _M_adapter.Road._op_setSpeedLimit.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.RoadPrx.ice_checkedCast(proxy, '::adapter::Road', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.RoadPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::Road'
    _M_adapter._t_RoadPrx = IcePy.defineProxy('::adapter::Road', RoadPrx)

    _M_adapter.RoadPrx = RoadPrx
    del RoadPrx

    _M_adapter.Road = Ice.createTempClass()
    class Road(_M_adapter.BaseItem):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::Road')

        def ice_id(self, current=None):
            return '::adapter::Road'

        @staticmethod
        def ice_staticId():
            return '::adapter::Road'

        def setStartAngle(self, angle, current=None):
            raise NotImplementedError("servant method 'setStartAngle' not implemented")

        def setEndAngle(self, angle, current=None):
            raise NotImplementedError("servant method 'setEndAngle' not implemented")

        def setStarts(self, roadPointId, current=None):
            raise NotImplementedError("servant method 'setStarts' not implemented")

        def setEnds(self, roadPointId, current=None):
            raise NotImplementedError("servant method 'setEnds' not implemented")

        def setRoadAttributes(self, roadAttributesId, current=None):
            raise NotImplementedError("servant method 'setRoadAttributes' not implemented")

        def setAverageSpeed(self, averageSpeed, current=None):
            raise NotImplementedError("servant method 'setAverageSpeed' not implemented")

        def setSpeedLimit(self, speedLimit, current=None):
            raise NotImplementedError("servant method 'setSpeedLimit' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_RoadDisp)

        __repr__ = __str__

    _M_adapter._t_RoadDisp = IcePy.defineClass('::adapter::Road', Road, (), None, (_M_adapter._t_BaseItemDisp,))
    Road._ice_type = _M_adapter._t_RoadDisp

    Road._op_setStartAngle = IcePy.Operation('setStartAngle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    Road._op_setEndAngle = IcePy.Operation('setEndAngle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    Road._op_setStarts = IcePy.Operation('setStarts', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Road._op_setEnds = IcePy.Operation('setEnds', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Road._op_setRoadAttributes = IcePy.Operation('setRoadAttributes', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Road._op_setAverageSpeed = IcePy.Operation('setAverageSpeed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Road._op_setSpeedLimit = IcePy.Operation('setSpeedLimit', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_adapter.Road = Road
    del Road

_M_adapter._t_RoadAttributes = IcePy.defineValue('::adapter::RoadAttributes', Ice.Value, -1, (), False, True, None, ())

if 'RoadAttributesPrx' not in _M_adapter.__dict__:
    _M_adapter.RoadAttributesPrx = Ice.createTempClass()
    class RoadAttributesPrx(_M_adapter.BaseItemPrx):

        def setMotorway(self, isMotorway, context=None):
            return _M_adapter.RoadAttributes._op_setMotorway.invoke(self, ((isMotorway, ), context))

        def setMotorwayAsync(self, isMotorway, context=None):
            return _M_adapter.RoadAttributes._op_setMotorway.invokeAsync(self, ((isMotorway, ), context))

        def begin_setMotorway(self, isMotorway, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.RoadAttributes._op_setMotorway.begin(self, ((isMotorway, ), _response, _ex, _sent, context))

        def end_setMotorway(self, _r):
            return _M_adapter.RoadAttributes._op_setMotorway.end(self, _r)

        def setUrban(self, isUrban, context=None):
            return _M_adapter.RoadAttributes._op_setUrban.invoke(self, ((isUrban, ), context))

        def setUrbanAsync(self, isUrban, context=None):
            return _M_adapter.RoadAttributes._op_setUrban.invokeAsync(self, ((isUrban, ), context))

        def begin_setUrban(self, isUrban, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.RoadAttributes._op_setUrban.begin(self, ((isUrban, ), _response, _ex, _sent, context))

        def end_setUrban(self, _r):
            return _M_adapter.RoadAttributes._op_setUrban.end(self, _r)

        def setServiceArea(self, isServiceArea, context=None):
            return _M_adapter.RoadAttributes._op_setServiceArea.invoke(self, ((isServiceArea, ), context))

        def setServiceAreaAsync(self, isServiceArea, context=None):
            return _M_adapter.RoadAttributes._op_setServiceArea.invokeAsync(self, ((isServiceArea, ), context))

        def begin_setServiceArea(self, isServiceArea, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.RoadAttributes._op_setServiceArea.begin(self, ((isServiceArea, ), _response, _ex, _sent, context))

        def end_setServiceArea(self, _r):
            return _M_adapter.RoadAttributes._op_setServiceArea.end(self, _r)

        def setControlledAccess(self, isControlledAccess, context=None):
            return _M_adapter.RoadAttributes._op_setControlledAccess.invoke(self, ((isControlledAccess, ), context))

        def setControlledAccessAsync(self, isControlledAccess, context=None):
            return _M_adapter.RoadAttributes._op_setControlledAccess.invokeAsync(self, ((isControlledAccess, ), context))

        def begin_setControlledAccess(self, isControlledAccess, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.RoadAttributes._op_setControlledAccess.begin(self, ((isControlledAccess, ), _response, _ex, _sent, context))

        def end_setControlledAccess(self, _r):
            return _M_adapter.RoadAttributes._op_setControlledAccess.end(self, _r)

        def setToll(self, isToll, context=None):
            return _M_adapter.RoadAttributes._op_setToll.invoke(self, ((isToll, ), context))

        def setTollAsync(self, isToll, context=None):
            return _M_adapter.RoadAttributes._op_setToll.invokeAsync(self, ((isToll, ), context))

        def begin_setToll(self, isToll, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.RoadAttributes._op_setToll.begin(self, ((isToll, ), _response, _ex, _sent, context))

        def end_setToll(self, _r):
            return _M_adapter.RoadAttributes._op_setToll.end(self, _r)

        def setBridge(self, isBridge, context=None):
            return _M_adapter.RoadAttributes._op_setBridge.invoke(self, ((isBridge, ), context))

        def setBridgeAsync(self, isBridge, context=None):
            return _M_adapter.RoadAttributes._op_setBridge.invokeAsync(self, ((isBridge, ), context))

        def begin_setBridge(self, isBridge, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.RoadAttributes._op_setBridge.begin(self, ((isBridge, ), _response, _ex, _sent, context))

        def end_setBridge(self, _r):
            return _M_adapter.RoadAttributes._op_setBridge.end(self, _r)

        def setTunnel(self, isTunnel, context=None):
            return _M_adapter.RoadAttributes._op_setTunnel.invoke(self, ((isTunnel, ), context))

        def setTunnelAsync(self, isTunnel, context=None):
            return _M_adapter.RoadAttributes._op_setTunnel.invokeAsync(self, ((isTunnel, ), context))

        def begin_setTunnel(self, isTunnel, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.RoadAttributes._op_setTunnel.begin(self, ((isTunnel, ), _response, _ex, _sent, context))

        def end_setTunnel(self, _r):
            return _M_adapter.RoadAttributes._op_setTunnel.end(self, _r)

        def setFerry(self, isFerry, context=None):
            return _M_adapter.RoadAttributes._op_setFerry.invoke(self, ((isFerry, ), context))

        def setFerryAsync(self, isFerry, context=None):
            return _M_adapter.RoadAttributes._op_setFerry.invokeAsync(self, ((isFerry, ), context))

        def begin_setFerry(self, isFerry, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.RoadAttributes._op_setFerry.begin(self, ((isFerry, ), _response, _ex, _sent, context))

        def end_setFerry(self, _r):
            return _M_adapter.RoadAttributes._op_setFerry.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.RoadAttributesPrx.ice_checkedCast(proxy, '::adapter::RoadAttributes', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.RoadAttributesPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::RoadAttributes'
    _M_adapter._t_RoadAttributesPrx = IcePy.defineProxy('::adapter::RoadAttributes', RoadAttributesPrx)

    _M_adapter.RoadAttributesPrx = RoadAttributesPrx
    del RoadAttributesPrx

    _M_adapter.RoadAttributes = Ice.createTempClass()
    class RoadAttributes(_M_adapter.BaseItem):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::RoadAttributes')

        def ice_id(self, current=None):
            return '::adapter::RoadAttributes'

        @staticmethod
        def ice_staticId():
            return '::adapter::RoadAttributes'

        def setMotorway(self, isMotorway, current=None):
            raise NotImplementedError("servant method 'setMotorway' not implemented")

        def setUrban(self, isUrban, current=None):
            raise NotImplementedError("servant method 'setUrban' not implemented")

        def setServiceArea(self, isServiceArea, current=None):
            raise NotImplementedError("servant method 'setServiceArea' not implemented")

        def setControlledAccess(self, isControlledAccess, current=None):
            raise NotImplementedError("servant method 'setControlledAccess' not implemented")

        def setToll(self, isToll, current=None):
            raise NotImplementedError("servant method 'setToll' not implemented")

        def setBridge(self, isBridge, current=None):
            raise NotImplementedError("servant method 'setBridge' not implemented")

        def setTunnel(self, isTunnel, current=None):
            raise NotImplementedError("servant method 'setTunnel' not implemented")

        def setFerry(self, isFerry, current=None):
            raise NotImplementedError("servant method 'setFerry' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_RoadAttributesDisp)

        __repr__ = __str__

    _M_adapter._t_RoadAttributesDisp = IcePy.defineClass('::adapter::RoadAttributes', RoadAttributes, (), None, (_M_adapter._t_BaseItemDisp,))
    RoadAttributes._ice_type = _M_adapter._t_RoadAttributesDisp

    RoadAttributes._op_setMotorway = IcePy.Operation('setMotorway', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    RoadAttributes._op_setUrban = IcePy.Operation('setUrban', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    RoadAttributes._op_setServiceArea = IcePy.Operation('setServiceArea', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    RoadAttributes._op_setControlledAccess = IcePy.Operation('setControlledAccess', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    RoadAttributes._op_setToll = IcePy.Operation('setToll', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    RoadAttributes._op_setBridge = IcePy.Operation('setBridge', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    RoadAttributes._op_setTunnel = IcePy.Operation('setTunnel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    RoadAttributes._op_setFerry = IcePy.Operation('setFerry', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())

    _M_adapter.RoadAttributes = RoadAttributes
    del RoadAttributes

_M_adapter._t_RoadPoint = IcePy.defineValue('::adapter::RoadPoint', Ice.Value, -1, (), False, True, None, ())

if 'RoadPointPrx' not in _M_adapter.__dict__:
    _M_adapter.RoadPointPrx = Ice.createTempClass()
    class RoadPointPrx(_M_adapter.BaseItemPrx):

        def setLatitude(self, lat, context=None):
            return _M_adapter.RoadPoint._op_setLatitude.invoke(self, ((lat, ), context))

        def setLatitudeAsync(self, lat, context=None):
            return _M_adapter.RoadPoint._op_setLatitude.invokeAsync(self, ((lat, ), context))

        def begin_setLatitude(self, lat, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.RoadPoint._op_setLatitude.begin(self, ((lat, ), _response, _ex, _sent, context))

        def end_setLatitude(self, _r):
            return _M_adapter.RoadPoint._op_setLatitude.end(self, _r)

        def setLongitude(self, lon, context=None):
            return _M_adapter.RoadPoint._op_setLongitude.invoke(self, ((lon, ), context))

        def setLongitudeAsync(self, lon, context=None):
            return _M_adapter.RoadPoint._op_setLongitude.invokeAsync(self, ((lon, ), context))

        def begin_setLongitude(self, lon, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.RoadPoint._op_setLongitude.begin(self, ((lon, ), _response, _ex, _sent, context))

        def end_setLongitude(self, _r):
            return _M_adapter.RoadPoint._op_setLongitude.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.RoadPointPrx.ice_checkedCast(proxy, '::adapter::RoadPoint', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.RoadPointPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::RoadPoint'
    _M_adapter._t_RoadPointPrx = IcePy.defineProxy('::adapter::RoadPoint', RoadPointPrx)

    _M_adapter.RoadPointPrx = RoadPointPrx
    del RoadPointPrx

    _M_adapter.RoadPoint = Ice.createTempClass()
    class RoadPoint(_M_adapter.BaseItem):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::RoadPoint')

        def ice_id(self, current=None):
            return '::adapter::RoadPoint'

        @staticmethod
        def ice_staticId():
            return '::adapter::RoadPoint'

        def setLatitude(self, lat, current=None):
            raise NotImplementedError("servant method 'setLatitude' not implemented")

        def setLongitude(self, lon, current=None):
            raise NotImplementedError("servant method 'setLongitude' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_RoadPointDisp)

        __repr__ = __str__

    _M_adapter._t_RoadPointDisp = IcePy.defineClass('::adapter::RoadPoint', RoadPoint, (), None, (_M_adapter._t_BaseItemDisp,))
    RoadPoint._ice_type = _M_adapter._t_RoadPointDisp

    RoadPoint._op_setLatitude = IcePy.Operation('setLatitude', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    RoadPoint._op_setLongitude = IcePy.Operation('setLongitude', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_adapter.RoadPoint = RoadPoint
    del RoadPoint

_M_adapter._t_Junction = IcePy.defineValue('::adapter::Junction', Ice.Value, -1, (), False, True, None, ())

if 'JunctionPrx' not in _M_adapter.__dict__:
    _M_adapter.JunctionPrx = Ice.createTempClass()
    class JunctionPrx(_M_adapter.RoadPointPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.JunctionPrx.ice_checkedCast(proxy, '::adapter::Junction', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.JunctionPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::Junction'
    _M_adapter._t_JunctionPrx = IcePy.defineProxy('::adapter::Junction', JunctionPrx)

    _M_adapter.JunctionPrx = JunctionPrx
    del JunctionPrx

    _M_adapter.Junction = Ice.createTempClass()
    class Junction(_M_adapter.RoadPoint):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::Junction', '::adapter::RoadPoint')

        def ice_id(self, current=None):
            return '::adapter::Junction'

        @staticmethod
        def ice_staticId():
            return '::adapter::Junction'

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_JunctionDisp)

        __repr__ = __str__

    _M_adapter._t_JunctionDisp = IcePy.defineClass('::adapter::Junction', Junction, (), None, (_M_adapter._t_RoadPointDisp,))
    Junction._ice_type = _M_adapter._t_JunctionDisp

    _M_adapter.Junction = Junction
    del Junction

_M_adapter._t_Delimiter = IcePy.defineValue('::adapter::Delimiter', Ice.Value, -1, (), False, True, None, ())

if 'DelimiterPrx' not in _M_adapter.__dict__:
    _M_adapter.DelimiterPrx = Ice.createTempClass()
    class DelimiterPrx(_M_adapter.RoadPointPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.DelimiterPrx.ice_checkedCast(proxy, '::adapter::Delimiter', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.DelimiterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::Delimiter'
    _M_adapter._t_DelimiterPrx = IcePy.defineProxy('::adapter::Delimiter', DelimiterPrx)

    _M_adapter.DelimiterPrx = DelimiterPrx
    del DelimiterPrx

    _M_adapter.Delimiter = Ice.createTempClass()
    class Delimiter(_M_adapter.RoadPoint):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::Delimiter', '::adapter::RoadPoint')

        def ice_id(self, current=None):
            return '::adapter::Delimiter'

        @staticmethod
        def ice_staticId():
            return '::adapter::Delimiter'

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_DelimiterDisp)

        __repr__ = __str__

    _M_adapter._t_DelimiterDisp = IcePy.defineClass('::adapter::Delimiter', Delimiter, (), None, (_M_adapter._t_RoadPointDisp,))
    Delimiter._ice_type = _M_adapter._t_DelimiterDisp

    _M_adapter.Delimiter = Delimiter
    del Delimiter

_M_adapter._t_Manager = IcePy.defineValue('::adapter::Manager', Ice.Value, -1, (), False, True, None, ())

if 'ManagerPrx' not in _M_adapter.__dict__:
    _M_adapter.ManagerPrx = Ice.createTempClass()
    class ManagerPrx(Ice.ObjectPrx):

        def create(self, type, context=None):
            return _M_adapter.Manager._op_create.invoke(self, ((type, ), context))

        def createAsync(self, type, context=None):
            return _M_adapter.Manager._op_create.invokeAsync(self, ((type, ), context))

        def begin_create(self, type, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Manager._op_create.begin(self, ((type, ), _response, _ex, _sent, context))

        def end_create(self, _r):
            return _M_adapter.Manager._op_create.end(self, _r)

        def persist(self, context=None):
            return _M_adapter.Manager._op_persist.invoke(self, ((), context))

        def persistAsync(self, context=None):
            return _M_adapter.Manager._op_persist.invokeAsync(self, ((), context))

        def begin_persist(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Manager._op_persist.begin(self, ((), _response, _ex, _sent, context))

        def end_persist(self, _r):
            return _M_adapter.Manager._op_persist.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.ManagerPrx.ice_checkedCast(proxy, '::adapter::Manager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.ManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::Manager'
    _M_adapter._t_ManagerPrx = IcePy.defineProxy('::adapter::Manager', ManagerPrx)

    _M_adapter.ManagerPrx = ManagerPrx
    del ManagerPrx

    _M_adapter.Manager = Ice.createTempClass()
    class Manager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::Manager')

        def ice_id(self, current=None):
            return '::adapter::Manager'

        @staticmethod
        def ice_staticId():
            return '::adapter::Manager'

        def create(self, type, current=None):
            raise NotImplementedError("servant method 'create' not implemented")

        def persist(self, current=None):
            raise NotImplementedError("servant method 'persist' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_ManagerDisp)

        __repr__ = __str__

    _M_adapter._t_ManagerDisp = IcePy.defineClass('::adapter::Manager', Manager, (), None, ())
    Manager._ice_type = _M_adapter._t_ManagerDisp

    Manager._op_create = IcePy.Operation('create', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_adapter._t_ItemType, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Manager._op_persist = IcePy.Operation('persist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_adapter.Manager = Manager
    del Manager

_M_adapter._t_Weather = IcePy.defineValue('::adapter::Weather', Ice.Value, -1, (), False, True, None, ())

if 'WeatherPrx' not in _M_adapter.__dict__:
    _M_adapter.WeatherPrx = Ice.createTempClass()
    class WeatherPrx(_M_adapter.BaseItemPrx):

        def setWind(self, wind, context=None):
            return _M_adapter.Weather._op_setWind.invoke(self, ((wind, ), context))

        def setWindAsync(self, wind, context=None):
            return _M_adapter.Weather._op_setWind.invokeAsync(self, ((wind, ), context))

        def begin_setWind(self, wind, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Weather._op_setWind.begin(self, ((wind, ), _response, _ex, _sent, context))

        def end_setWind(self, _r):
            return _M_adapter.Weather._op_setWind.end(self, _r)

        def setTemperature(self, temperature, context=None):
            return _M_adapter.Weather._op_setTemperature.invoke(self, ((temperature, ), context))

        def setTemperatureAsync(self, temperature, context=None):
            return _M_adapter.Weather._op_setTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_setTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_adapter.Weather._op_setTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_adapter.Weather._op_setTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_adapter.WeatherPrx.ice_checkedCast(proxy, '::adapter::Weather', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_adapter.WeatherPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::adapter::Weather'
    _M_adapter._t_WeatherPrx = IcePy.defineProxy('::adapter::Weather', WeatherPrx)

    _M_adapter.WeatherPrx = WeatherPrx
    del WeatherPrx

    _M_adapter.Weather = Ice.createTempClass()
    class Weather(_M_adapter.BaseItem):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::adapter::BaseItem', '::adapter::Weather')

        def ice_id(self, current=None):
            return '::adapter::Weather'

        @staticmethod
        def ice_staticId():
            return '::adapter::Weather'

        def setWind(self, wind, current=None):
            raise NotImplementedError("servant method 'setWind' not implemented")

        def setTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_adapter._t_WeatherDisp)

        __repr__ = __str__

    _M_adapter._t_WeatherDisp = IcePy.defineClass('::adapter::Weather', Weather, (), None, (_M_adapter._t_BaseItemDisp,))
    Weather._ice_type = _M_adapter._t_WeatherDisp

    Weather._op_setWind = IcePy.Operation('setWind', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Weather._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_adapter.Weather = Weather
    del Weather

# End of module adapter
